@using System.Diagnostics.Eventing.Reader
@using ServerManagement.StateStore
@inject NavigationManager NavigationManager
@inject TorontoOnlineServerStore TorontoOnlineServerStore

@if (Server != null)
{
    <!---<EditForm Model="server" FormName="serverComponent" OnSubmit="ChangeServerStatus">

    <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>
    <InputText @bind-Value="server.Name" hidden></InputText>
    <InputText @bind-Value="server.City" hidden></InputText>
    <InputCheckbox @bind-Value="server.IsOnline" hidden></InputCheckbox>
    <div data-name="@server.Name" data-status="Server is @(server.IsOnline ? "online" : "offline")" style="color:@(server.IsOnline ? "green" : "red")">
    @server.Name is in @server.City that şs @(server.IsOnline ? "online" : "offline")
    &nbsp;
    <button type="submit" class="btn btn-primary">Turn On</button>
    </div>
    </EditForm>
    -->
    <tr @key="Server.ServerId" style="padding: 8px 0; background-color:@GetBackgroundColor()">

        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td style="color :@((Server.IsOnline ? "green" : "red"))">
            @(Server.IsOnline ? "online" : "offline")
        </td>

        <td>
            @if (Server.IsOnline)
            {
                Random random = new Random();
                int randomNumber = random.Next(0, 500);
                <text>@randomNumber</text>
            }
            else
            {
                <text>N/A</text>
            }
        </td>
        @if (Server.IsOnline)
        {
            <button type="button" class="btn btn-outline-danger" @onclick="@(() => { SetServerStatus(false);})">Turn Off</button>
        }
        else
        {
            <button type="button" class="btn btn-outline-success" @onclick="@(() => { SetServerStatus(true);})">Turn on</button>
        }
        <td>
            <button type="button" class="btn btn-link" @onclick="(() => { editServer = !editServer; })">Edit V2</button>
        </td>

        <td>
            <button type="button" class="btn btn-primary" style="background-color:#007bff; color:white; border:none;" @onclick="(() => { DeleteServer(Server.ServerId); })">Delete</button>
        </td>

        <a href="server/@(Server.ServerId)">Edit</a>
        <!--blazor özle built kolaylaştırma
        <EditForm

        Model="server"
        FormName="@($"form-server-{server.ServerId}")"
        OnValidSubmit="@(() => { DeleteServer(server.ServerId); })">
        <button type="submit" class="btn btn-primary">Delete</button>

        </EditForm>
        -->
        @if (editServer)
        {
            <ServerManagement.Components.Pages.EditServer Id="this.Server.ServerId"></ServerManagement.Components.Pages.EditServer>
        }
    </tr>

}
@code {

    private bool editServer = false;
    //[SupplyParameterFromForm] //blazor formdan gelenleri server modeline inject eder
    [Parameter]
    public Server? Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")] //parent kısmından veri çektik
    public string? SelectedCity { get; set; }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            //this.servers = ServersRepository.GetServersByCity(selectedCity);
            ////serversa atadık uı kısmında anlık yenileyip city leri getirmesi için


            NavigationManager.NavigateTo($"/servers/back_from/{this.SelectedCity}", forceLoad: true);
        }
    }

    private string GetBackgroundColor()
    {
        if (SelectedCity != null)
        {
            switch (this.SelectedCity)
            {
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgray";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                case "Halifax": return "white";
                default:
                    return "white";
            }

        }
        else
        {
            return "white";
        }
    }

    private void SetServerStatus(bool status)
    {
        if (Server is not null)
        {
            if (this.Server.IsOnline != status)
            {
                if (this.Server.City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
                {
                    var num = TorontoOnlineServerStore.GetNumberServersOnline();
                    if (status)
                        TorontoOnlineServerStore.SetNumberServersOnline(num + 1);
                    else if (num > 1)
                        TorontoOnlineServerStore.SetNumberServersOnline(num - 1);
                }
                this.Server.IsOnline = status;
            }
        }

    }


}
