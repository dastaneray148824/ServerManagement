@page "/servers"
@using System.Diagnostics
@using Microsoft.AspNetCore.SignalR
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
<div class="container-fluid text-center mt-4">
    <div class="row justify-content-center gx-3 gy-4">
        @foreach (var cityName in cities)
        {
            <div class="col-6 col-sm-4 col-md-3 col-lg-2">
                <div class="card h-100 shadow-sm border @((selectedCity == cityName) ? "border-primary border-3" : "")">

                    <!-- Sabit yükseklikte image container -->
                    <div style="height: 150px; overflow: hidden;">
                        <img src="@($"/images/{cityName}.jpeg")"
                             class="card-img-top"
                             alt="@cityName"
                             style="width: 100%; height: 100%; object-fit: cover;"
                             onerror="this.src='/images/placeholder.jpg'" />
                    </div>

                    <!-- Buton hizalı -->
                    <div class="card-body d-flex align-items-end justify-content-center p-2">
                        <button class="btn btn-primary w-100" @onclick="() => SelectCity(cityName)">
                            @cityName
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


<br/>

<div class="input-group mb-3">

    <input type="text" class="form-control" placeholder="Search Servers" @bind-value="serverFilter"
           @bind-value:event="oninput"/>
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>

</div>

<br/>



<ServerComponent @rendermode="InteractiveServer"></ServerComponent> <!--partial view-->

<ul class ="list-group mb-4">
    <!--Virtualize Items="this.servers" Context="server">
        </Virtualize> çok fazla veriyi aynı anda güncellemesin sistem sıkışmasın
--> 
    @foreach (var server in servers)
    {
        <li class="d-flex justify-content-between align-items-center mb-3" @key="server.ServerId">
            @server.Name in @server.City 
            <span style="color :@((server.IsOnline ? "green" : "red"))">@(server.IsOnline ? "online" : "offline")

            </span>
            &nbsp;
            <a href="/servers/edit/@server.ServerId" class="btn btn-link">Edit</a>

            <button type="button" class="btn btn-primary" @onclick="(() => { DeleteServer(server.ServerId); })">Delete</button>
            <!--blazor özle built kolaylaştırma 
            <EditForm

            Model="server"
            FormName="@($"form-server-{server.ServerId}")"
            OnValidSubmit="@(() => { DeleteServer(server.ServerId); })">
            <button type="submit" class="btn btn-primary">Delete</button>

            </EditForm>
            -->
        </li>
    }

</ul>

<a href="/servers/add" class="btn btn-link">Add Server</a>

<p>
    <button class=" btn btn-secondary"
    @onclick="@(() =>
{
    this.servers.Insert(0,new Server {Name = "ServerA", City ="Toronto"});
})">
        Add server 2
    </button>
</p>





@code {
    private List<Server> servers = new List<Server>();

    private List<string> cities = CitiesRepository.GetCities();

    private string selectedCity { get; set; }

    private string _serverFilter = "";

    private string serverFilter { get =>_serverFilter;
        set
        {
            _serverFilter = value;
            this.servers = ServersRepository.SearchServers(serverFilter);
        }
        }


    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            this.servers = ServersRepository.GetServersByCity(selectedCity); //serversa atadık uı kısmında anlık yenileyip city leri getirmesi için

        }
    }

    private void SelectCity(string SelectedCityName)
    {
        this.selectedCity = SelectedCityName;
        this.servers= ServersRepository.GetServersByCity(selectedCity);

    }

   /* private void HandleServerFilterChange(ChangeEventArgs args) //	Bu, input kutusundaki değeri yakalayan olay argümanıdır.
    {
        serverFilter = args.Value.ToString() ?? string.Empty; //Kullanıcının girdiği değeri alır
    }
    */

    private void HandleSearch()
    {
        this.servers= ServersRepository.SearchServers(serverFilter);
        this.selectedCity=String.Empty;
    }

}

