@page "/servers"
@page "/servers/back_from/{CityName}"
@using System.Diagnostics
@using Microsoft.AspNetCore.SignalR
@using ServerManagement.StateStore
@rendermode InteractiveServer
@inject TorontoOnlineServerStore TorontoOnlineServerStore
@inject OttawaOnlineServerStore OttawaOnlineServerStore
@inject CalgaryOnlineServerStore CalgaryOnlineServerStore
@inject MontrealOnlineServerStore MontrealOnlineServerStore
@inject HalifaxOnlineServerStore HalifaxOnlineServerStore
@inject NavigationManager NavigationManager

<CityListComponent @ref="cityListComponent" SelectCityCallback="HandleCitySelection" selectedCity="@this.selectedCity"></CityListComponent>
<br />
<SearchBarComponent @ref="searchBarComponent" SearchServerCallback="HandleSearchServer"></SearchBarComponent>
<br />
<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent @rendermode="InteractiveServer" CityName="@this.selectedCity" SearchFilter="@SearchFilter"></ServerListComponent>
</CascadingValue>

<a href="/servername" class="btn btn-link">Add Server</a>

@code {
    [Parameter] public string CityName { get; set; }
    //private List<string> cities = CitiesRepository.GetCities();
    private string selectedCity = "Toronto";
    private string SearchFilter = "";
    private CityListComponent? cityListComponent;
    private SearchBarComponent? searchBarComponent;

    private void HandleSearch()
    {
        //this.servers= serverEFCoreRepository.SearchServers(serverFilter);
        // this.selectedCity=String.Empty;
    }

    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;
        this.SearchFilter = string.Empty;
        searchBarComponent.ClearFilter();
    }

    private void HandleSearchServer(string searchFilter)
    {
        this.SearchFilter = searchFilter;
        cityListComponent.ClearSelection();
    }

    protected override void OnAfterRender(bool firstrender)
    {
        if (firstrender)
        {
            if (NavigationManager.Uri.Contains("back_from") && !string.IsNullOrEmpty(CityName)) // 
            {
                selectedCity = CityName;
                StateHasChanged();
            }

            var serversToronto = serverEFCoreRepository.GetServersByCity("Toronto");
            if (serversToronto is not null)            
                TorontoOnlineServerStore.SetNumberServersOnline(serversToronto.Count(x => x.IsOnline));

            var serversMontreal = serverEFCoreRepository.GetServersByCity("Montreal");
            if (serversMontreal is not null)
                MontrealOnlineServerStore.SetNumberServersOnline(serversMontreal.Count(x => x.IsOnline));

            var serversOttawa = serverEFCoreRepository.GetServersByCity("Ottawa");
            if (serversOttawa is not null)
                OttawaOnlineServerStore.SetNumberServersOnline(serversOttawa.Count(x => x.IsOnline));
            
            var serversCalgary = serverEFCoreRepository.GetServersByCity("Calgary");
            if (serversCalgary is not null)
                CalgaryOnlineServerStore.SetNumberServersOnline(serversCalgary.Count(x => x.IsOnline));

            var serversHalifax = serverEFCoreRepository.GetServersByCity("Halifax");
            if (serversHalifax is not null)
                HalifaxOnlineServerStore.SetNumberServersOnline(serversHalifax.Count(x => x.IsOnline));
        }

        }
    }
}

